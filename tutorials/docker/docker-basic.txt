# commands cli

* images: enumera las imagenes que te has descargado.
	-aq: te devuelve solo el id 

* search: para buscar imagenes dentro del dockerhub.

* pull: para descargar una imagenen de dockerhub.

* run: ejecuta una nueva instacia de una imagen descargada
	-it ejecuta la imagen de manera interactiva
	-p: crea como un vinculo para los puertos de la imagen y la computadora host <host-port>:<imgen-port>
	-d: esto va a ejecutar la imagen en segundo plano.
	--name: crea un nombre para la instancia de la imagen.
	-e: para definir variable de ambiente del systema
	-v:  te permite crear un vinculo entre dos carpetas una en el host y la otra en la imagen
* ps: te muestra el id de la imagen que se esta ejecutando, ya que se pueden ejecutar varias veces la misma imagen.
	-a: muestra todas las imagenes ya iniciadas que estan en stop.
	-aq: te muestra solo los ids de las imagenes en stop.
	--format: te permite personalizar la salida del comando, utiliza {{.ID}},{{.IMAGE}},etc, para mostrar el conteido que se quiere mostrar
* rm: eliminar las instancias de imagenes ya creadas que estan en stop. (el que puede verificarse con ps)
	-f: para forzar el proceso de eliminacion.
* start: ejecuta una instacia ya iniciada de una imagen, pero lo hace en segundo plano
* stop: detiene la ejecucion de una instancia de una imagen que se este ejecutando.
* rmi: elimina una imagen descargada.
* exec: ejecuta una instacia ya creada de una imagen
	-it: lo ejecuta de manera interactiba
* login: para poder logearte e indentificarte, para pusher al dockerhub
* push: para cargar una imagen al dockerhub

$(): vaina rara, como que encapsula la ejecucion de algo interno, y luego se puede utlizar para complementar otro comando, esto apartenmete es de linux

con esto va a eliminar todos las instancias, mostrandote solo los ids como resultado.
docker rm $(docker ps -aq)
va a detener todas la sinstacias que se esten ejecutando
docker stop $(docker ps -aq)

# DockerFile

Es una archivo de configuraciones para la creacion de una imagen

* FROM: la imagen en que va a correr la nueva imagen, es por lo general un sistema operativo.

FROM [--platform=<platform>] <image> [AS <name>]
Or

FROM [--platform=<platform>] <image>[:<tag>] [AS <name>]
Or

FROM [--platform=<platform>] <image>[@<digest>] [AS <name>]

* RUN: 
RUN <command> (shell form, the command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows)
RUN ["executable", "param1", "param2"] (exec form)

* SHELL: te permite espesificar que terminal va a ejecutar los comandos

SHELL ["cmd", "/S", "/C"]
RUN echo hello

* WORKDIR: The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile.

ENV DIRPATH=/path
WORKDIR $DIRPATH/$DIRNAME
RUN pwd
The output of the final pwd command in this Dockerfile would be /path/$DIRNAME

* VOLUME: crea un vinculo entre dos carpetas, del host y la imagen, si se modifica un archivo de alguna manera, el cambio se vera reflejado en ambas partes.

VOLUME ["/data"]

* COPY: copia archivos a la imagen

COPY hom* /mydir/

* ADD: copia archivos a la imagen

ADD hom* /mydir/

* ENV: establece variables de ambiente

ENV MY_NAME="John Doe"
ENV MY_DOG=Rex\ The\ Dog
ENV MY_CAT=fluffy

# tutoriales

* ejecutar una estancia con diferetes puertos

docker run -p 80:80 -p 3000:80 -p 4000:80 nginx 

* Mostrar un mensaje personalizado para ps

docker -ps --format="ID:\t{{.ID}}\nNames: \t{{.Names}}"

* crear vinculo entre el host y una imagen

docker run -d -p 80:80 --name nalga -v ~/taller/project:/usr/share/nginx/html nginx	


